# -*- coding: utf-8 -*-
"""
Shyraq Translator Bot ‚Äî –∞–≤—Ç–æ–º–∞—Ç—Ç—ã –∞—É–¥–∞—Ä—É + –∂–∞–∑—ã–ª—ã–º —Ç–µ–∫—Å–µ—Ä—É
"""

import os
import asyncio
import uuid
import logging
from typing import Optional
import re

import aiosqlite
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram import F
from typing import List, Tuple
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    InlineQuery, InputTextMessageContent, InlineQueryResultArticle
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.client.bot import DefaultBotProperties
from aiogram import Router

# ---------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –æ—Ä—Ç–∞ –∞–π–Ω—ã–º–∞–ª—ã—Å—ã –æ—Ä–Ω–∞—Ç—ã–ª–º–∞“ì–∞–Ω. export BOT_TOKEN='...'")

DB_PATH = os.getenv("SHYRAQ_DB", "shyraq_bot.db")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# ---------------------
class ConvertStates(StatesGroup):
    direction = State()  # –ë—ñ–∑ —Ç–µ–∫ –±–∞“ì—ã—Ç —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω
    waiting_for_text = State()
# ---------------------
cyrillic_to_shyraq = {
    "–ê":"A","–∞":"a","”ò":"√Å","”ô":"√°","–ë":"B","–±":"b","–í":"V","–≤":"v",
    "–ì":"G","–≥":"g","“í":"«¥","“ì":"«µ","–î":"D","–¥":"d","–ï":"E","–µ":"e",
    "–Å":"√â","—ë":"√©","–ñ":"ZH","–∂":"zh","–ó":"Z","–∑":"z","–ò":"√ç","–∏":"√≠",
    "–ô":"√å","–π":"√¨","–ö":"K","–∫":"k","“ö":"Q","“õ":"q","–õ":"L","–ª":"l",
    "–ú":"M","–º":"m","–ù":"N","–Ω":"n","“¢":"≈ä","“£":"≈ã","–û":"O","–æ":"o",
    "”®":"√ì","”©":"√≥","–ü":"P","–ø":"p","–†":"R","—Ä":"r","–°":"S","—Å":"s",
    "–¢":"T","—Ç":"t","–£":"√ù","—É":"√Ω","“∞":"U","“±":"u","“Æ":"√ö","“Ø":"√∫",
    "–§":"F","—Ñ":"f","–•":"KH","—Ö":"kh","“∫":"H","“ª":"h","–¶":"C","—Ü":"c",
    "–ß":"CH","—á":"ch","–®":"SH","—à":"sh","–©":"≈û","—â":"≈ü","–´":"Y","—ã":"y",
    "–Ü":"I","—ñ":"i","–≠":"ƒö","—ç":"ƒõ","–Æ":"√ú","—é":"√º","–Ø":"√Ä","—è":"√†",
    "–¨":"","—å":"","–™":"","—ä":""
}

shyraq_to_cyrillic = {}
for cyr, shy in cyrillic_to_shyraq.items():
    if not shy:
        continue
    shyraq_to_cyrillic[shy.lower()] = cyr.lower()
    shyraq_to_cyrillic[shy.upper()] = cyr.upper()
    shyraq_to_cyrillic[shy.capitalize()] = cyr.upper()

# Regex
cyrillic_patterns = sorted(cyrillic_to_shyraq.keys(), key=lambda x: -len(x))
cyrillic_regex = re.compile("|".join(re.escape(k) for k in cyrillic_patterns))

shyraq_patterns = sorted(shyraq_to_cyrillic.keys(), key=lambda x: -len(x))
shyraq_regex = re.compile("|".join(re.escape(k) for k in shyraq_patterns), re.IGNORECASE)

# ---------------------
# DB
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS user_prefs (
                user_id INTEGER PRIMARY KEY,
                direction TEXT NOT NULL
            )
        """)
        await db.commit()
    logger.info("DB initialized at %s", DB_PATH)

async def set_user_direction(user_id: int, direction: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO user_prefs(user_id, direction) VALUES (?, ?)
            ON CONFLICT(user_id) DO UPDATE SET direction=excluded.direction
        """, (user_id, direction))
        await db.commit()

async def get_user_direction(user_id: int) -> Optional[str]:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT direction FROM user_prefs WHERE user_id = ?", (user_id,))
        row = await cur.fetchone()
        return row[0] if row else None

# ---------------------
def word_bounds(text: str, idx: int):
    n = len(text)
    s = idx
    while s > 0 and text[s-1].isalpha():
        s -= 1
    e = idx
    while e < n and text[e].isalpha():
        e += 1
    return s, e

def word_is_all_upper(text: str, start: int, end: int) -> bool:
    has_alpha = False
    for ch in text[start:end]:
        if ch.isalpha():
            has_alpha = True
            if ch.islower():
                return False
    return has_alpha

# ---------------------
def translate_text(text: str, to_shyraq: bool = True) -> str:
    if to_shyraq:
        def repl(match):
            ch = match.group(0)
            mapped = cyrillic_to_shyraq.get(ch, ch)
            if ch.isupper():
                s, e = word_bounds(text, match.start())
                all_upper = word_is_all_upper(text, s, e)
                return mapped.upper() if all_upper else mapped.capitalize()
            else:
                return mapped.lower()
        return cyrillic_regex.sub(repl, text)
    else:
        def repl(match):
            chunk = match.group(0)
            base = shyraq_to_cyrillic.get(chunk.lower(), chunk)
            if chunk.isupper():
                return base.upper()
            elif chunk[0].isupper():
                return base.upper()
            else:
                return base.lower()
        return shyraq_regex.sub(repl, text)

# ---------------------
SUBSCRIBE_CHANNELS = ["Zhora08", "Shyraq_Tech"]

async def check_subscriptions(user_id: int, bot: Bot) -> tuple[bool, list[str]]:
    """“ö–æ–ª–¥–∞–Ω—É—à—ã –±–∞—Ä–ª—ã“õ –∞—Ä–Ω–∞“ì–∞ –∂–∞–∑—ã–ª“ì–∞–Ω –±–∞ ‚Äî —Ç–µ–∫—Å–µ—Ä–µ–¥—ñ.
    True -> –±”ô—Ä—ñ–Ω–µ –∂–∞–∑—ã–ª“ì–∞–Ω
    False -> —Ç—ñ–∑—ñ–º–º–µ–Ω “õ–∞–π –∞—Ä–Ω–∞“ì–∞ –∂–∞–∑—ã–ª–º–∞“ì–∞–Ω—ã–Ω “õ–∞–π—Ç–∞—Ä–∞–¥—ã
    """
    not_subscribed = []
    for channel in SUBSCRIBE_CHANNELS:
        try:
            member = await bot.get_chat_member(f"@{channel}", user_id)
            if member.status in ["left", "kicked"]:
                not_subscribed.append(channel)
        except Exception:
            not_subscribed.append(channel)
    return (len(not_subscribed) == 0, not_subscribed)

async def send_subscribe_prompt(message: types.Message, missing_channels: list[str] | None = None):
    if missing_channels:
        text = (
            "‚ö†Ô∏è –°—ñ–∑ ”ô–ª—ñ –¥–µ –±–∞—Ä–ª—ã“õ –∞—Ä–Ω–∞“ì–∞ –∂–∞–∑—ã–ª–º–∞“ì–∞–Ω –µ–∫–µ–Ω—Å—ñ–∑!\n\n"
            "–¢”©–º–µ–Ω–¥–µ–≥—ñ –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—ã“£—ã–∑ üëá"
        )
        await message.answer(
            text,
            reply_markup=get_incomplete_keyboard(missing_channels)
        )
    else:
        text = (
            "üì¢ –ë–æ—Ç—Ç—ã “õ–æ–ª–¥–∞–Ω—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—ã“£—ã–∑:\n\n"
            "–ñ–∞–∑—ã–ª“ì–∞–Ω —Å–æ“£, ¬´–¢–µ–∫—Å–µ—Ä—É ‚úÖÔ∏è¬ª –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑."
        )
        await message.answer(
            text,
            reply_markup=get_subscribe_keyboard()
        )

def get_control_buttons(current_direction: str):
    opposite = "to_cyrillic" if current_direction == "to_shyraq" else "to_shyraq"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ë–∞“ì—ã—Ç—ã–Ω –∞—É—ã—Å—Ç—ã—Ä—É", callback_data=f"switch:{opposite}")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –¢–æ–ª—ã“ì—ã—Ä–∞“õ", url="https://telegra.ph/Help-Shyraq-Translator-Bot-09-30")]
    ])

def get_subscribe_keyboard():
    kb = InlineKeyboardBuilder()
    for i, ch in enumerate(SUBSCRIBE_CHANNELS, start=1):
        kb.button(text=f"üì¢ {i}-–∞—Ä–Ω–∞", url=f"https://t.me/{ch}")
    kb.button(text="–¢–µ–∫—Å–µ—Ä—É ‚úÖÔ∏è", callback_data="check_subs")
    kb.adjust(1)
    return kb.as_markup()

def get_incomplete_keyboard(missing_channels: list[str]):
    kb = InlineKeyboardBuilder()
    for i, ch in enumerate(missing_channels, start=1):
        kb.button(text=f"üì¢ {i}-–∞—Ä–Ω–∞", url=f"https://t.me/{ch}")
    kb.button(text="–¢–µ–∫—Å–µ—Ä—É ‚úÖÔ∏è", callback_data="check_subs")
    kb.adjust(1)
    return kb.as_markup()

# ---------------------
# –ü”ô—Ä–º–µ–Ω–¥–µ—Ä ‚Äî –ú—ñ–Ω–¥–µ—Ç—Ç—ñ –∂–∞–∑—ã–ª—ã–º “õ–æ—Å—ã–ª–¥—ã
@router.message(Command("start"))
async def cmd_start(message: types.Message, bot: Bot):
    # –ú—ñ–Ω–¥–µ—Ç—Ç—ñ –∂–∞–∑—ã–ª—ã–º —Ç–µ–∫—Å–µ—Ä—É
    is_subscribed, missing = await check_subscriptions(message.from_user.id, bot)
    if not is_subscribed:
        await send_subscribe_prompt(message, missing)
        return

    await message.answer(
        "<b>–°”ô–ª–µ–º! –ú–µ–Ω Shyraq Translator Bot–ø—ã–Ω.</b>\n\n"
        "–ü”ô—Ä–º–µ–Ω–¥–µ—Ä:\n"
        "/convert - –º”ô—Ç—ñ–Ω–¥—ñ –∞—É–¥–∞—Ä—É\n"
        "/help - “õ—ã—Å“õ–∞—à–∞ –∫”©–º–µ–∫\n"
        "/about - “õ—ã—Å“õ–∞—à–∞ —Ç–∞–Ω—ã—Å—Ç—ã—Ä—É\n"
        "/donate - “õ–æ–ª–¥–∞—É\n"
        "/feedback - –∫–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å\n\n"
        "–ò–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–¥–µ “õ–æ–ª–¥–∞–Ω—É: @ShyraqTranslatorBot &lt;–º”ô—Ç—ñ–Ω&gt;"
    )

@router.message(Command("about"))
async def cmd_about(message: types.Message, bot: Bot):
    is_subscribed, missing = await check_subscriptions(message.from_user.id, bot)
    if not is_subscribed:
        await send_subscribe_prompt(message, missing)
        return

    await message.answer(
        "<b>Shyraq ”ô–ª—ñ–ø–±–∏—ñ</b> ‚Äî “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω –ª–∞—Ç—ã–Ω –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ —Ü–∏—Ñ—Ä–ª—ã“õ –æ—Ä—Ç–∞“ì–∞ –±–µ–π—ñ–º–¥–µ–π—Ç—ñ–Ω –∂–∞–∑—É –∂“Ø–π–µ—Å—ñ. "
        "<b>–ë“±–ª –±–æ—Ç</b> ‚Äî –∫–∏—Ä–∏–ª–ª –º–µ–Ω Shyraq –∞—Ä–∞—Å—ã–Ω–¥–∞ —Ç–µ–∑ ”ô—Ä—ñ –¥“±—Ä—ã—Å –∞—É–¥–∞—Ä—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω “õ“±—Ä–∞–ª.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ÑπÔ∏è –¢–æ–ª—ã“ì—ã—Ä–∞“õ", url="https://telegra.ph/About-Shyraq-Translator-Bot-09-30")]
            ]
        )
    )

@router.message(Command("help"))
async def cmd_help(message: types.Message, bot: Bot):
    is_subscribed, missing = await check_subscriptions(message.from_user.id, bot)
    if not is_subscribed:
        await send_subscribe_prompt(message, missing)
        return

    await message.answer(
        "<b>–ê—É–¥–∞—Ä–º–∞—à—ã–Ω—ã “õ–æ–ª–¥–∞–Ω—É</b>\n\n"
        "1Ô∏è‚É£ <b>–ë–∞“ì—ã—Ç—ã–Ω —Ç–∞“£–¥–∞—É</b>\n–ê—É–¥–∞—Ä–º–∞ –±–∞“ì—ã—Ç—ã–Ω –∞—É—ã—Å“õ—ã—à –±–∞—Ç—ã—Ä–º–∞ –∞—Ä“õ—ã–ª—ã —Ç–∞“£–¥–∞“£—ã–∑.\n\n"
        "2Ô∏è‚É£ <b>–ú”ô—Ç—ñ–Ω–¥—ñ –µ–Ω–≥—ñ–∑—É</b>\n–ú”ô—Ç—ñ–Ω–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ ‚Äî –∞—É–¥–∞—Ä–º–∞ ”©–∑–¥—ñ–≥—ñ–Ω–µ–Ω –∂“Ø–∑–µ–≥–µ –∞—Å–∞–¥—ã.\n\n"
        "3Ô∏è‚É£ <b>–ë–∞“ì—ã—Ç—ã–Ω –∞—É—ã—Å—Ç—ã—Ä—É</b>\n“ö–∞–∂–µ—Ç –±–æ–ª—Å–∞, –±–∞“ì—ã—Ç—Ç—ã –∞—É—ã—Å—Ç—ã—Ä—É –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—Å–∞“£—ã–∑, –∞—É–¥–∞—Ä–º–∞ –∫–µ—Ä—ñ “õ–∞–π—Ç–∞–¥—ã.\n\n",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ÑπÔ∏è –¢–æ–ª—ã“ì—ã—Ä–∞“õ", url="https://telegra.ph/Help-Shyraq-Translator-Bot-09-30")]
            ]
        )
    )

@router.message(Command("donate"))
async def cmd_donate(message: types.Message, bot: Bot):
    is_subscribed, missing = await check_subscriptions(message.from_user.id, bot)
    if not is_subscribed:
        await send_subscribe_prompt(message, missing)
        return

    text = (
        "<b>–ë–æ—Ç—Ç—ã “õ–æ–ª–¥–∞—É–¥—ã“£ 2 –∂–æ–ª—ã –±–∞—Ä:</b>\n\n"
        "1) –î–æ—Å—Ç–∞—Ä—ã“£—ã–∑“ì–∞ –±”©–ª—ñ—Å—É –Ω–µ–º–µ—Å–µ –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—É: @Zhora08 @Shyraq_Tech\n"
        "2) “ö–∞—Ä–∂—ã–ª–∞–π “õ–æ–ª–¥–∞—É: +7 778 764 4508 (–ë–æ–ª–∞—Ç –ñ.)"
    )

    await message.answer(
        text=text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üí∞“ö–∞—Ä–∂—ã–ª–∞–π “õ–æ–ª–¥–∞—É",
                    url="https://t.me/ShyraqPayBot?start=donate"
                )]
            ]
        )
    )

@router.message(Command("feedback"))
async def cmd_feedback(message: types.Message, bot: Bot):
    is_subscribed, missing = await check_subscriptions(message.from_user.id, bot)
    if not is_subscribed:
        await send_subscribe_prompt(message, missing)
        return

    await message.answer(
        "–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω: @shyraq_zheke_bailanys_bot\n\n"
        "‚úç –ë–æ—Ç —Ç—É—Ä–∞–ª—ã —Å“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑, “±—Å—ã–Ω—ã—Å—Ç–∞—Ä—ã“£—ã–∑ –±–æ–ª—Å–∞, –±–æ—Ç –∂“±–º—ã—Å—ã–Ω–¥–∞ –∞“õ–∞—É–ª–∞—Ä –±–æ–ª—Å–∞ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì®–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å", url="https://t.me/shyraq_zheke_bailanys_bot?start")]
            ]
        )
    )


# ---------------------
# /convert –ª–æ–≥–∏–∫–∞—Å—ã (–ú—ñ–Ω–¥–µ—Ç—Ç—ñ –∂–∞–∑—ã–ª—ã–º “õ–æ—Å—ã–ª“ì–∞–Ω)
@router.message(Command("convert"))
async def cmd_convert(message: types.Message, state: FSMContext, bot: Bot):
    # –ú—ñ–Ω–¥–µ—Ç—Ç—ñ –∂–∞–∑—ã–ª—ã–º —Ç–µ–∫—Å–µ—Ä—É
    is_subscribed, missing = await check_subscriptions(message.from_user.id, bot)
    if not is_subscribed:
        await send_subscribe_prompt(message, missing)
        return

    # –ï–≥–µ—Ä –∂–∞–∑—ã–ª—ã–º –¥“±—Ä—ã—Å –±–æ–ª—Å–∞ ‚Äî –±–∞“ì—ã—Ç—Ç—ã –∫”©—Ä—Å–µ—Ç—É
    current = await get_user_direction(message.from_user.id) or "to_shyraq"
    await set_user_direction(message.from_user.id, current)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÖ∞Ô∏è –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ ‚Üí Shyraq", callback_data="dir:to_shyraq")],
        [InlineKeyboardButton(text="üî§ Shyraq ‚Üí –ö–∏—Ä–∏–ª–ª–∏—Ü–∞", callback_data="dir:to_cyrillic")]
    ])

    await message.answer("–ú”ô—Ç—ñ–Ω–¥—ñ –∞—É–¥–∞—Ä—É –±–∞“ì—ã—Ç—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=kb)
    await state.set_state(ConvertStates.direction)

# Callback ”®“£–¥–µ—É
@router.callback_query(F.data.startswith("dir:"))
async def callback_convert_direction(query: types.CallbackQuery, state: FSMContext):
    direction = query.data.split(":", 1)[1]
    await set_user_direction(query.from_user.id, direction)
    await state.update_data(direction=direction)
    await query.message.answer("üì• –ê—É–¥–∞—Ä“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω –º”ô—Ç—ñ–Ω–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:")
    await state.set_state(ConvertStates.waiting_for_text)
    await query.answer()

@router.callback_query(F.data == "check_subs")
async def check_subs_callback(query: types.CallbackQuery, bot: Bot):
    is_subscribed, missing = await check_subscriptions(query.from_user.id, bot)
    if is_subscribed:
        await query.message.edit_text(
            "‚úÖ –°—ñ–∑ –±–∞—Ä–ª—ã“õ –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ –∂–∞–∑—ã–ª–¥—ã“£—ã–∑!\n\n–ï–Ω–¥—ñ –±–æ—Ç—Ç—ã –µ—Ä–∫—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω–∞ –∞–ª–∞—Å—ã–∑."
        )
        await query.answer("‚úÖ –ë–∞—Ä–ª—ã“ì—ã –¥“±—Ä—ã—Å!")
    else:
        await query.message.edit_text(
            "‚ö†Ô∏è –°—ñ–∑ ”ô–ª—ñ –¥–µ –±–∞—Ä–ª—ã“õ –∞—Ä–Ω–∞“ì–∞ –∂–∞–∑—ã–ª–º–∞“ì–∞–Ω –µ–∫–µ–Ω—Å—ñ–∑!",
            reply_markup=get_incomplete_keyboard(missing)
        )
        await query.answer("–ê—Ä–Ω–∞–ª–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—ã–ø –±–æ–ª“ì–∞–Ω —Å–æ“£ “õ–∞–π—Ç–∞ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.")

# –ú”ô—Ç—ñ–Ω “õ–∞–±—ã–ª–¥–∞—É –∂”ô–Ω–µ –∞—É–¥–∞—Ä—É
@router.message(ConvertStates.waiting_for_text)
async def do_translate(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–ú”ô—Ç—ñ–Ω –±–æ—Å –±–æ–ª–º–∞—É—ã –∫–µ—Ä–µ–∫.")
        return

    direction = await get_user_direction(message.from_user.id) or "to_shyraq"
    to_shyraq = (direction == "to_shyraq")
    translated = translate_text(message.text, to_shyraq=to_shyraq)

    max_len = 4096
    total_len = len(translated)
    for start in range(0, total_len, max_len):
        part = translated[start:start+max_len]
        info = f"\n\nüî¢ –¢–∞“£–±–∞ —Å–∞–Ω—ã (–±”©–ª—ñ–∫/–±–∞—Ä–ª—ã“ì—ã): {len(part)}/{total_len}"
        await message.answer(part + info, reply_markup=get_control_buttons(direction))

    await state.clear()

# ---------------------
# –ê–≤—Ç–æ–º–∞—Ç—Ç—ã –∞—É–¥–∞—Ä—É
@router.message()
async def auto_translate(message: types.Message, state: FSMContext, bot: Bot):
    # –¢–µ–∫ –º”ô—Ç—ñ–Ω–¥–µ—Ä–≥–µ “ì–∞–Ω–∞
    if not message.text:
        return

    # –ú—ñ–Ω–¥–µ—Ç—Ç—ñ –∂–∞–∑—ã–ª—ã–º —Ç–µ–∫—Å–µ—Ä—É
    is_subscribed, missing = await check_subscriptions(message.from_user.id, bot)
    if not is_subscribed:
        # –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∂–∞–∑—ã–ª–º–∞“ì–∞–Ω –±–æ–ª—Å–∞ ‚Äî –∞—Ä–Ω–∞–ª–∞—Ä –º–µ–Ω "–¢–µ–∫—Å–µ—Ä—É ‚úÖÔ∏è" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —à—ã“ì–∞—Ä—É
        await send_subscribe_prompt(message, missing)
        return

    # –ë–∞“ì—ã—Ç—Ç—ã –∞–ª—É –Ω–µ–º–µ—Å–µ ”ô–¥–µ–ø–∫—ñ "to_shyraq"
    direction = await get_user_direction(message.from_user.id) or "to_shyraq"
    translated = translate_text(message.text, to_shyraq=(direction == "to_shyraq"))

    # “∞–∑—ã–Ω –º”ô—Ç—ñ–Ω–¥–µ—Ä–¥—ñ –±”©–ª—ñ–∫–∫–µ –±”©–ª—É
    max_len = 4096
    total_len = len(translated)
    for start in range(0, total_len, max_len):
        part = translated[start:start+max_len]
        info = f"\n\nüî¢ –¢–∞“£–±–∞ —Å–∞–Ω—ã (–±”©–ª—ñ–∫/–±–∞—Ä–ª—ã“ì—ã): {len(part)}/{total_len}"
        await message.answer(part + info, reply_markup=get_control_buttons(direction))

@router.callback_query(F.data.startswith("switch:"))
async def callback_switch_direction(query: types.CallbackQuery, state: FSMContext):
    new_dir = query.data.split(":", 1)[1]
    await set_user_direction(query.from_user.id, new_dir)

    if query.message and query.message.text:
        original = query.message.text.split("\n\nüî¢")[0]
        retranslated = translate_text(original, to_shyraq=(new_dir == "to_shyraq"))
        info = f"\n\nüî¢ –¢–∞“£–±–∞ —Å–∞–Ω—ã: {len(retranslated)}"
        try:
            await query.message.edit_text(
                retranslated + info,
                reply_markup=get_control_buttons(new_dir)
            )
        except Exception:
            await query.message.answer(
                retranslated + info,
                reply_markup=get_control_buttons(new_dir)
            )

    await query.answer("‚úÖ –ë–∞“ì—ã—Ç ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ")

# ---------------------
# –ò–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º
@router.inline_query()
async def inline_translate(inline_query: types.InlineQuery, bot: Bot):
    q = inline_query.query or ""

    # ‚úÖ –ú—ñ–Ω–¥–µ—Ç—Ç—ñ –∂–∞–∑—ã–ª—ã–º —Ç–µ–∫—Å–µ—Ä—É
    is_subscribed, missing = await check_subscriptions(inline_query.from_user.id, bot)
    if not is_subscribed:
        # –ï–≥–µ—Ä –∂–∞–∑—ã–ª–º–∞“ì–∞–Ω –±–æ–ª—Å–∞ ‚Äî –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—É —Ç—É—Ä–∞–ª—ã –µ—Å–∫–µ—Ä—Ç—É –∫”©—Ä—Å–µ—Ç—ñ–ª–µ–¥—ñ
        not_subscribed_text = (
            "‚ö†Ô∏è –ë–æ—Ç—Ç—ã –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–¥–µ “õ–æ–ª–¥–∞–Ω—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—ã“£—ã–∑:\n\n"
            + "\n".join(f"üì¢ https://t.me/{ch}" for ch in missing)
            + "\n\n–ñ–∞–∑—ã–ª“ì–∞–Ω —Å–æ“£ ‚Äî —Å“±—Ä–∞—É—ã“£—ã–∑–¥—ã “õ–∞–π—Ç–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑."
        )

        # –ò–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–¥–µ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä—ã –±–∞—Ä –∂–∞—É–∞–ø “õ–∞–π—Ç–∞—Ä—ã–ª–∞–¥—ã
        buttons = InlineKeyboardMarkup(inline_keyboard=[
            *[[InlineKeyboardButton(text=f"üì¢ {i+1}-–∞—Ä–Ω–∞", url=f"https://t.me/{ch}")]
              for i, ch in enumerate(missing)],
        ])
        result = types.InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title="‚ö†Ô∏è –ú—ñ–Ω–¥–µ—Ç—Ç—ñ –∂–∞–∑—ã–ª—ã–º “õ–∞–∂–µ—Ç",
            input_message_content=types.InputTextMessageContent(message_text=not_subscribed_text),
            description="–ê—Ä–Ω–∞–ª–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—ã“£—ã–∑ –¥–∞, “õ–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑.",
            reply_markup=buttons,
            thumb_url="https://cdn-icons-png.flaticon.com/512/939/939382.png",
            thumb_width=48,
            thumb_height=48,
        )
        await inline_query.answer(results=[result], cache_time=0, is_personal=True)
        return

    # ‚úÖ –ï–≥–µ—Ä –∂–∞–∑—ã–ª“ì–∞–Ω –±–æ–ª—Å–∞ ‚Äî –±“±—Ä—ã–Ω“ì—ã–¥–∞–π –∞—É–¥–∞—Ä—É –ª–æ–≥–∏–∫–∞—Å—ã
    if not q.strip():
        res_to_shy = "–ú”ô—Ç—ñ–Ω–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑..."
        res_to_cyr = "M√°tindi engizi≈ãiz..."
    else:
        res_to_shy = translate_text(q, to_shyraq=True)
        res_to_cyr = translate_text(q, to_shyraq=False)

    switch_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üîÑ –ë–∞“ì—ã—Ç—Ç—ã –∞—É—ã—Å—Ç—ã—Ä—É",
            switch_inline_query_current_chat=q
        )]
    ])

    results = [
        types.InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title="üÖ∞Ô∏è –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ ‚Üí Shyraq",
            input_message_content=types.InputTextMessageContent(message_text=res_to_shy),
            description=(res_to_shy[:256] + '...') if len(res_to_shy) > 256 else res_to_shy,
            thumb_url="https://cdn-icons-png.flaticon.com/512/12452/12452357.png",
            thumb_width=48,
            thumb_height=48,
            reply_markup=switch_buttons
        ),
        types.InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title="üî§ Shyraq ‚Üí –ö–∏—Ä–∏–ª–ª–∏—Ü–∞",
            input_message_content=types.InputTextMessageContent(message_text=res_to_cyr),
            description=(res_to_cyr[:256] + '...') if len(res_to_cyr) > 256 else res_to_cyr,
            thumb_url="https://cdn-icons-png.flaticon.com/512/10050/10050517.png",
            thumb_width=48,
            thumb_height=48,
            reply_markup=switch_buttons
        )
    ]

    await inline_query.answer(results=results, cache_time=0, is_personal=True)

# ---------------------
# Router “õ–æ—Å—É
dp.include_router(router)

# ---------------------
# –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É
async def main():
    logger.info("–î–µ—Ä–µ–∫“õ–æ—Ä–¥—ã “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É...")
    await init_db()
    logger.info("–ë–æ—Ç –¥–∞–π—ã–Ω. Polling –±–∞—Å—Ç–∞–ª–¥—ã...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        logger.info("Bot stopped.")

if __name__ == "__main__":
    asyncio.run(main())
